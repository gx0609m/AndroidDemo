简介
    Android 中提供的用于 异步通信/消息传递 的类，线程间 的通信媒介；


作用
    在 多线程 的应用场景中，将 工作线程中需更新UI的操作信息 传递到 UI主线程，从而实现 工作线程对UI的更新处理，最终实现异步消息的处理；

    |— — — — —|                    |— — — — —|                             |— — — — — — —|
    | 工作线程 |——更新UI的操作信息——>| Handler |——传递工作线程更新UI的操作信息——>| UI（主）线程 |—— —— —— —— —— |
    |— — — — —|                    |— — — — —|           |                 |— — — — — — —|                |
                                                         |                       ↑                        |
                                                         |                       |—— — 在主线程中更新UI — ——|
                                                         |
                                                         ↓
                                       a.添加 消息（Message） 到 消息队列（MessageQueue）；
                                       b.处理 循环器（Looper） 分发过来的 消息（Message）；


主要方法
    ——— public Handler(Callback callback, boolean async)；

    ——— public final boolean sendMessage(Message msg)；

    ——— public final boolean post(Runnable r)；

    ——— public boolean sendMessageAtTime(Message msg, long uptimeMillis)；

    ——— public void dispatchMessage(Message msg)；

    ——— private static void handleCallback(Message message)；

    ——— public void handleMessage(Message msg)；


主要用途
    1>.合理调度安排 消息 和 runnable对象 ，使它们在 将来的某个点 被执行；
    2>.将一个动作 入队 安排在 非当前线程 执行；


说明
    Handler属于某个线程，取决Handler对象在哪个线程中建立，Handler在构建时做了如下的默认动作：
        ——— 从线程上下文取得Looper；
        ——— 通过 Looper获取到消息队列 并记录在自己的成员mQueue变量中；


Handler发送消息
    Handler有两个发送消息的方法：
        ——— post(Runnable r)；
        ——— sendMessage(Message msg)；
    这两个方法，本质上都是调用了 sendMessageAtTime(Message msg, long uptimeMillis) 方法，
    而发送消息，其实有两步：
        a.将 消息的target 设置为 本Handler对象 ；
        b.将 消息 放入 消息队列中 的合适位置 ；


