Property Animation
    简介：
        为了解决补间动画等的缺陷，系统在 Android 3.0（API 11） 后开始提供的一种全新动画模式；


    背景：
        Android系统一开始提供的两种实现动画的方式 ——— 逐帧动画 & 补间动画 存在一定的缺点，例如：
            1.作用对象局限于 View：
                补间动画 只能够作用在视图View上，即只可以对一个
                    Button、
                    TextView、
                    甚至是 LinearLayout、
                    或者其它 继承自View 的组件、
                进行动画操作，但无法对非View的对象进行动画操作；

                但有些情况下的动画效果只是视图的某个 属性 & 对象 而不是整个视图，如：
                    现需要实现视图的颜色动态变化，那么就需要操作视图的颜色属性从而实现动画效果，而不是针对整个视图进行动画操作；

            2.没有改变View的属性，只是改变视觉效果：
                补间动画只是改变了View的视觉效果，而不会真正去改变View的属性，如：
                    将屏幕左上角的按钮 通过补间动画 移动到屏幕的右下角，
                    点击当前按钮位置（屏幕右下角）是没有效果的，
                    因为实际上按钮还是停留在屏幕左上角，补间动画只是将这个按钮绘制到屏幕右下角，改变了视觉效果而已；

            3.动画效果单一：
                补间动画只能实现 平移、旋转、缩放、透明度 这些简单的动画需求；
                即在 功能 & 可扩展性 有较大局限；


    特点：
        1.作用对象 ——— 不只是View对象，可以是任意Java对象，甚至没对象也可以；
        2.动画效果 ——— 不只是4种基本的补间动画变换，还有其他动画效果；
        3.作用领域 ——— API 11 后引入；


    原理：
        在一定时间间隔内，通过不断对值进行改变，同时不断的将该值赋给对象的属性，从而实现 该对象 在 该属性 上的动画效果；
            可以是任意对象的任意属性，但这个属性须提供 初始值 & setXX() 方法，如果没有初始值，则须提供 getXX() 方法；

        工作流程图：
            ——— res/flowchart/property_animation.png；

            由工作流程图可以看到，属性动画有两个非常重要的类
                ——— ValueAnimator类 & ObjectAnimator类；

    监听动画：
        addListener(new AnimatorListener()){...}

        addListener(new AnimatorListenerAdapter()){...}

        addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {...}


    ViewPropertyAnimator：
        说明：
            从上面可以看出，属性动画的 本质是对值 操作，
            但是，Java是面向对象的，所以 Google 团队添加 面向对象操作 的 属性动画使用类 ——— ViewPropertyAnimator；

        使用：
            /*
             * ViewPropertyAnimator的功能建立在 .animate() 上；
             * 调用 animate() 方法返回值是一个ViewPropertyAnimator对象,之后的调用的所有方法都是通过该实例完成；
             * 通过 调用该实例 的各种方法来实现动画效果；
             * ViewPropertyAnimator所有接口方法都使用 连缀语法（流式） 来设计，每个方法的返回值都是它自身的实例；
             * 因此，调用完一个方法后可直接连缀调用另一方法,即可通过一行代码就完成所有动画效果；
             */
            View.animate().xxx().xxx();

        实例 ——— useViewPropertyAnimator()：
            mButton = (Button) findViewById(R.id.Button);                                               // 创建动画作用对象：此处以Button为例
            mButton.animate().alpha(0f);                                                                // 单个动画设置:将按钮变成透明状态
            mButton.animate().alpha(0f).setDuration(5000).setInterpolator(new BounceInterpolator());    // 单个动画效果设置 & 参数设置
            mButton.animate().alpha(0f).x(500).y(500);                                                  // 组合动画:将按钮变成透明状态再移动到(500,500)处

            特别注意：
                a.通过 ViewPropertyAnimator 的动画会 自动启动，无需调用start()方法，因为新的接口中使用了隐式启动动画的功能，只要我们将动画定义完成后，动画就会自动启动；
                b.该机制对于组合动画也同样有效，只要不断地连缀新的方法，那么动画就不会立刻执行，等到所有在ViewPropertyAnimator上设置的方法都执行完毕后，动画就会自动启动；
                c.如果不想使用这一默认机制，也可以显式地调用start()方法来启动动画；


    主要使用到的类对象：
            使用类                                  作用                                   备注
        ValueAnimator           先改变值，然后 手动赋值 给对象的属性从而实现动画       本质是一种 值 的操作机制
                                       （间接 对对象属性 进行操作）

        ObjectAnimator          先改变值，然后 自动赋值 给对象的属性从而实现动画       采用 get() & set() 进行自动赋值
                                       （直接 对对象属性 进行操作）

        AnimatorSet             实现组合动画

        ViewPropertyAnimator    采用 对对象操作 实现属性动画

        addListener()           动画监听器，监听动画 开始、结束、取消、重复 时刻       可采用动画适配器 ——— AnimatorListenerAdapter
                                                                                        （按需监听动画时刻）

        类间的 继承关系 如下：

                                 Animator
                                    |
                                    |
                            |—— —— —— —— —— ——|
                            |                 |
                      ValueAnimator       AnimatorSet
                            |
                            |
                      ObjectAnimator


    总结：
        ValueAnimator类 & ObjectAnimator 类，二者都属于属性动画
            ——— 相同点是，本质上都是 先改变值，然后 赋值 给对象的属性从而实现动画效果；
            ——— 不同点是，
                    ValueAnimator 类 是 先改变值，然后 手动赋值 给对象的属性从而实现动画，是 间接 对对象属性进行操作；
                    ObjectAnimator类 是 先改变值，然后 自动赋值 给对象的属性从而实现动画；是 直接 对对象属性进行操作；

        整体工作流程图：
            ——— res/flowchart/property_animation.png；










（https://www.jianshu.com/p/2412d00a0ce4）
