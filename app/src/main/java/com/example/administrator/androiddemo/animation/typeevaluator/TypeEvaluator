TypeEvaluator（估值器）
    估值器（TypeEvaluator）：
            作用：
                设置动画如何从 初始值 过渡到 结束值 的 变化逻辑，决定 值 的具体变化数值；

            分类：
                ValueAnimator.ofInt()    ————  IntEvaluator         整形估值器     ————    系统内置；
                ValueAnimator.ofFloat()  ————  FloatEvaluator       浮点型估值器   ————     系统内置；
                ValueAnimator.ofObject() ————  MyObjectEvaluator    对象估值器     ————    自定义；

                以 ValueAnimator.ofFloat() 为例，
                    它实现了 “将初始值 以浮点型的形式 过渡到结束值”  的逻辑，那么这个 过渡逻辑 具体是怎么样的呢？

                其实，
                    是系统内置了一个 FloatEvaluator 估值器，内部实现了 初始值 与 结束值 以 浮点型 的过渡逻辑；

                我们可以看下 FloatEvaluator 的代码，如下：
                    /**
                     * FloatEvaluator 实现了 TypeEvaluator 接口
                     */
                    public class FloatEvaluator implements TypeEvaluator<Number> {
                        /*
                         * 重写 evaluate()
                         *    fraction：表示动画完成度（根据它来计算当前动画的值）；
                         *    startValue、endValue：动画的初始值和结束值；
                         */
                        public Float evaluate(float fraction, Number startValue, Number endValue) {
                            /*
                             * 初始值 过渡到 结束值 的算法是：
                             *     1>.用结束值减去初始值，算出它们之间的差值；
                             *     2>.用上述差值乘以fraction系数；
                             *     3>.再加上初始值，就得到当前动画的值；
                             */
                            float startFloat = startValue.floatValue();
                            return startFloat + fraction * (endValue.floatValue() - startFloat);
                        }
                    }

                ValueAnimator.ofInt() & ValueAnimator.ofFloat() 都具备系统内置的估值器，即 FloatEvaluator & IntEvaluator；

                但对于 ValueAnimator.ofObject()，从上面的工作原理可以看出，
                    并没有系统默认实现，
                    因为对对象的动画操作复杂 & 多样，
                    系统无法知道如何从初始对象过度到结束对象，
                因此，对于 ValueAnimator.ofObject()，我们需自定义估值器（TypeEvaluator）来告知系统如何进行从 初始对象 过渡到 结束对象的逻辑；

                自定义估值器的实现逻辑如下：
                    /*
                     * 实现TypeEvaluator接口
                     */
                    public class MyObjectEvaluator implements TypeEvaluator{
                        /*
                         * 复写evaluate（），在evaluate（）里写入对象动画过渡的逻辑
                         * 参数说明：
                         *     fraction：表示动画完成度（根据它来计算当前动画的值）；
                         *     startValue、endValue：动画的初始值和结束值；
                         */
                        @Override
                        public Object evaluate(float fraction, Object startValue, Object endValue) {
                            /*
                             * 写入对象动画过渡的逻辑
                             */
                            ...

                            return value;   // 返回对象动画过渡的逻辑计算后的值
                        }

            实例说明自定义估值器的步骤：
                要实现的动画效果 ———— 一个圆从一个点 移动到 另外一个点：
                    自定义 TypeEvaluator 接口并通过 ValueAnimator.ofObject() 实现动画效果；

                步骤：
                    1>.定义对象类；
                       由于 ValueAnimator.ofObject() 是面向对象操作的，所以需要自定义对象类，
                       本例需要操作的对象是 圆的点坐标，所以定义：
                           Point.java

                    2>.根据需求 自定义估值器 实现 TypeEvaluator 接口；
                       实现 TypeEvaluator 接口的目的是 自定义如何 从初始点坐标 过渡 到结束点坐标，本例实现的是一个从左上角到右下角的坐标过渡逻辑；

                       PointEvaluator.java
                           public class PointEvaluator implements TypeEvaluator {
                               /*
                                * 实现 TypeEvaluator 接口，并复写 evaluate()
                                *      fraction：表示动画完成度（根据它来计算当前动画的值）
                                *      startValue、endValue：动画的初始值和结束值；
                                */
                               @Override
                               public Object evaluate(float fraction, Object startValue, Object endValue) {

                                   // 将 动画初始值startValue 和 动画结束值endValue 强制类型转换成 Point 对象
                                   Point startPoint = (Point) startValue;
                                   Point endPoint = (Point) endValue;

                                   // 根据fraction来计算当前动画的 x & y 的值
                                   float x = startPoint.getX() + fraction * (endPoint.getX() - endPoint.getX());
                                   float y = startPoint.getY() + fraction * (endPoint.getY() - endPoint.getY());

                                   // 将计算后的坐标封装到一个新的Point对象中并返回
                                   Point point = new Point(x, y);
                                   return point;
                               }
                           }