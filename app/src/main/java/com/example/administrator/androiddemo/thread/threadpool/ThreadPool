线程池
    概念：
        重用已有线程，从而减少线程的创建；
        基本作用就是进行线程的复用；


    优点：
        1.线程复用，减少线程创建、调度、销毁所消耗的时间；
        2.在执行大量异步任务时提高了性能，节约系统资源，提高系统吞吐量；
        3.Java内置的一套ExecutorService线程池相关的api，可以方便的控制线程的最大并发数、线程的定时任务、单线程的顺序执行等；


    ExecutorService：
        1.它是一个接口；
        2.如果要从真正意义上来说，可以叫它线程池的服务，因为它提供了众多接口api来控制线程池中的线程；


    ThreadPoolExecutor：
        1.实现了ExecutorService接口，是真正意义上的线程池；
        2.封装了一系列的api使得它具有线程池的特性，其中包括工作队列、核心线程数、最大线程数等；


    Executors：
        1.是官方提供的一个工厂类；
        2.封装好了众多功能不一样的线程池，从而使得我们创建线程池非常的简便；


    关系：
        ThreadPoolExecutor（类） --extends--> AbstractExecutorService（类） --implements--> ExecutorService（接口）--extends--Executor（接口）；
        Executors是封装了功能不一样的线程池的类，内部的封装其实也是通过new ThreadPoolExecutor(…)方式；


    创建线程池：
        1.new ThreadPoolExecutor(…)方式：
                我们看下ThreadPoolExecutor的构造方法，
                    public ThreadPoolExecutor(int corePoolSize,
                                              int maximumPoolSize,
                                              long keepAliveTime,
                                              TimeUnit unit,
                                              BlockingQueue<Runnable> workQueue,
                                              ThreadFactory threadFactory,
                                              RejectedExecutionHandler handler) {...}
                可以看到，如果这样创建线程池的话，我们需要配置一堆东西，非常麻烦，
                所以，官方也不推荐使用这种方法来创建线程池，而是推荐使用 Executors 的工厂方法来创建线程池；

        2.Executors 的工厂方法：
                Executors主要封装了五种功能不一样的线程池：
                    五种线程池的说明：
                        a.newFixedThreadPool()
                          作用：该方法返回一个固定线程数量的线程池，该线程池中的线程数量始终不变，即不会再创建新的线程，也不会
                               销毁已经创建好的线程，自始自终都是那几个固定的线程在工作，所以该线程池可以控制线程的最大并发数；
                          栗子：假如有一个新任务提交时，线程池中如果有空闲的线程则立即使用空闲线程来处理任务，如果没有，则会把
                               这个新任务存在一个任务队列中，一旦有线程空闲了，则按FIFO方式处理任务队列中的任务；
                          特点：
                               1.可控制线程最大并发数（同时执行的线程数）；
                               2.超出的线程会在队列中等待；

                        b.newCachedThreadPool()
                          作用：该方法返回一个可以根据实际情况调整线程池中线程的数量的线程池。即该线程池中的线程数量不确定，是根据实际情况动态调整的；
                          栗子：假如该线程池中的所有线程都正在工作，而此时有新任务提交，那么将会创建新的线程去处理该任务，而此时假如
                               之前有一些线程完成了任务，现在又有新任务提交，那么将不会创建新线程去处理，而是复用空闲的线程去处理新
                               任务。
                               那么此时有人有疑问了，那这样来说该线程池的线程岂不是会越集越多？
                               其实并不会，因为线程池中的线程都有一个“保持活动时间”的参数，通过配置它，如果线程池中的空闲线程的空闲
                               时间超过该“保存活动时间”则立刻停止该线程，而该线程池默认的“保持活动时间”为60s。
                          特点：
                              1.线程数无限制；
                              2.有空闲线程则复用空闲线程，若无空闲线程则新建线程；
                              3.一定程序减少频繁创建/销毁线程，减少系统开销；

                        c.newSingleThreadExecutor()
                          作用：该方法返回一个只有一个线程的线程池，即每次只能执行一个线程任务，多余的任务会保存到一个任务队列中，
                               等待这一个线程空闲，当这个线程空闲了再按FIFO方式顺序执行任务队列中的任务；

                        d.newScheduledThreadPool()
                          作用：该方法返回一个可以控制线程池内线程定时或周期性执行某任务的线程池；
                          特点：支持定时及周期性任务执行；

                        e.newSingleThreadScheduledExecutor()
                          作用：该方法返回一个可以控制线程池内线程定时或周期性执行某任务的线程池。只不过和上面的区别是该线程池大小为1，
                               而上面的可以指定线程池的大小；
                          特点：
                              1.有且仅有一个工作线程执行任务；
                              2.所有任务按照指定顺序执行，即遵循队列的入队出队规则；

                    五种线程池的获取：
                        通过Executors的工厂方法来获取：
                            a. ExecutorService fixedThreadPool = Executors.newFixedThreadPool(5);
                            b. ExecutorService singleThreadPool = Executors.newSingleThreadExecutor();
                            c. ExecutorService cachedThreadPool = Executors.newCachedThreadPool();
                            d. ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);
                            e. ScheduledExecutorService singleThreadScheduledPool = Executors.newSingleThreadScheduledExecutor();

                            注意：通过ScheduledExecutorService执行的周期任务，如果任务执行过程中抛出了异常，那么ScheduledExecutorService就会停止
                                 执行任务，且也不会再周期地执行该任务了。所以你如果想保住任务都一直被周期执行，那么catch一切可能的异常；

                        可以看到通过Executors的工厂方法来创建线程池极其简便，其实它的内部还是通过new ThreadPoolExecutor(…)的方式创建线程池的，
                        我们看一下这些工厂方法的内部实现：
                                public static ExecutorService newFixedThreadPool(int nThreads) {
                                    return new ThreadPoolExecutor(nThreads, nThreads,
                                                                  0L, TimeUnit.MILLISECONDS,
                                                                  new LinkedBlockingQueue<Runnable>());
                                }
                                public static ExecutorService newSingleThreadExecutor() {
                                    return new FinalizableDelegatedExecutorService
                                        (new ThreadPoolExecutor(1, 1,
                                                                0L, TimeUnit.MILLISECONDS,
                                                                new LinkedBlockingQueue<Runnable>()));
                                }
                                public static ExecutorService newCachedThreadPool() {
                                    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                                                  60L, TimeUnit.SECONDS,
                                                                  new SynchronousQueue<Runnable>());
                                }

                        可以清楚的看到这些方法的内部实现都是通过创建一个ThreadPoolExecutor对象来创建的，正所谓万变不离其宗，所以我们要了解线程池，
                        还是得了解ThreadPoolExecutor这个线程池类；
                        由于和定时任务相关的线程池比较特殊（newScheduledThreadPool()、newSingleThreadScheduledExecutor()），它们创建的线程池
                        内部实现是由ScheduledThreadPoolExecutor这个类实现的，而ScheduledThreadPoolExecutor是继承于ThreadPoolExecutor扩展而成的，
                        所以本质还是一样的，只不过多封装了一些定时任务相关的api；
                        所以我们主要就是要了解ThreadPoolExecutor；


    ThreadPoolExecutor：
        构造方法：
            进一步了解ThreadPoolExecutor，从它的构造方法开始：
                    public ThreadPoolExecutor(int corePoolSize,
                                              int maximumPoolSize,
                                              long keepAliveTime,
                                              TimeUnit unit,
                                              BlockingQueue<Runnable> workQueue,
                                              ThreadFactory threadFactory,
                                              RejectedExecutionHandler handler) {...}

            构造方法中有七个参数，下面来一一说明这些参数的作用：
                corePoolSize：线程池中的 核心线程 数量；
                              核心线程默认情况下会一直存活在线程池中，即使这个核心线程啥也不干(闲置状态)；
                              如果指定ThreadPoolExecutor的allowCoreThreadTimeOut这个属性为true，
                              那么核心线程如果不干活(闲置状态)的话，超过一定时间(keepAliveTime)，就会被销毁掉；
                maximumPoolSize：线程池中的 最大线程 数量；
                keepAliveTime："保持活动时间" ——— 线程池中非核心线程闲置超时时长；
                                它起作用必须在一个前提下，就是当线程池中的线程数量超过了corePoolSize（核心线程数量）；
                                表示不是核心线程的空闲线程的存活时间，即：不是核心线程的空闲线程在超过keepAliveTime时间内没有任务的话则被销毁；
                                主要应用在缓存线程池中；
                                如果设置allowCoreThreadTimeOut = true，则会作用于核心线程；
                unit：它是一个枚举类型，表示keepAliveTime的单位，常用的如：TimeUnit.SECONDS（秒）、TimeUnit.MILLISECONDS（毫秒）；
                workQueue：任务队列，主要用来存储已经提交但未被执行的任务，不同的线程池采用的排队策略不一样；
                           当所有的核心线程都在干活时，新添加的任务会被添加到这个队列中等待处理，如果队列满了，则新建非核心线程执行任务；
                threadFactory：线程工厂，用来创建线程池中的线程，通常用默认的即可；
                handler：通常叫做拒绝策略，在满足以下两种情况之一时，使用execute()来提交新的任务时将会拒绝：
                            a.线程池已经关闭；
                            b.任务太多导致  最大线程数和任务队列  已经饱和，无法再接收新的任务；
                         默认的拒绝策略是抛一个RejectedExecutionException异常；

        workQueue：
            ThreadPoolExecutor构造方法中的其他参数都好理解，但workQueue这个任务队列却要再次说明一下，它是一个
            BlockingQueue<Runnable>对象，而泛型则限定它是用来存放Runnable对象的；

            上面提到的Executors封装的五种功能不一的线程池，其实核心就是这个workQueue的实现不同；
            这里总结下这五种线程池分别用的是什么BlockingQueue：
                a.newFixedThreadPool() —> LinkedBlockingQueue；
                b.newSingleThreadExecutor() —> LinkedBlockingQueue；
                c.newCachedThreadPool() —> SynchronousQueue；
                d.newScheduledThreadPool() —> DelayedWorkQueue；
                e.newSingleThreadScheduledExecutor() —> DelayedWorkQueue；

            这些队列分别表示：
                LinkedBlockingQueue：无界的队列；
                                     这个队列接收到任务的时候：
                                        如果当前线程数小于核心线程数，则新建线程(核心线程)处理任务；
                                        如果当前线程数等于核心线程数，则进入队列等待；
                                        由于这个队列没有最大值限制，即所有超过核心线程数的任务都将被添加到队列中，这也就导致了maximumPoolSize的设定失效，因为总线程数永远不会超过corePoolSize；

                SynchronousQueue：直接提交的队列；
                                  这个队列接收到任务的时候，会直接提交给线程处理，而不保留它；
                                  如果所有线程都在工作怎么办？
                                  那就新建一个线程来处理这个任务！
                                  所以如果想要保证不出现'线程数达到了maximumPoolSize而不能新建线程--同时队列也满了就会造成--RejectedExecutionException'的错误，使用这个类型队列的时候，maximumPoolSize一般指定成Integer.MAX_VALUE，即无限大；

                DelayedWorkQueue：等待队列；
                                  队列内元素必须实现Delayed接口，这就意味着你传进去的任务必须先实现Delayed接口；
                                  这个队列接收到任务时，首先先入队，只有达到了指定的延时时间，才会执行任务；

                ArrayBlockingQueue：有界的队列；
                                    可以限定队列的长度，接收到任务的时候：
                                        如果没有达到corePoolSize的值，则新建线程(核心线程)执行任务；
                                        如果达到了，则入队等候；
                                        如果队列已满，则新建线程(非核心线程)执行任务；
                                        如果总线程数到了maximumPoolSize，并且队列也满了，则发生错误；

            实现了BlockingQueue接口的队列还有：ArrayBlockingQueue（有界的队列）、PriorityBlockingQueue（优先级队列）；

        使用：
            ThreadPoolExecutor的使用，涉及到一个极其重要的方法：
                execute(Runnable command)
            该方法意为执行给定的任务，该任务处理可能在新的线程、已入池的线程或者正调用的线程，这由ThreadPoolExecutor的实现决定；

                a.创建一个固定线程数量的线程池：
                        ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);

                        for (int i = 1; i <= 10; i++) {
                            final int index = i;

                            fixedThreadPool.execute(new Runnable() {
                                 @Override
                                 public void run() {
                                     String threadName = Thread.currentThread().getName();
                                     Log.v("zxy", "线程："+threadName+",正在执行第" + index + "个任务");
                                     try {
                                            Thread.sleep(2000);
                                     } catch (InterruptedException e) {
                                            e.printStackTrace();
                                     }
                                 }
                             });
                         }
                 b.创建一个可以定时或者周期性执行任务的线程池：
                            ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(3);

                            //延迟2秒后执行该任务
                            scheduledThreadPool.schedule(new Runnable() {
                                @Override
                                public void run() {

                                }
                            }, 2, TimeUnit.SECONDS);

                            //延迟1秒后，每隔2秒执行一次该任务
                            scheduledThreadPool.scheduleAtFixedRate(new Runnable() {
                                @Override
                                public void run() {

                                }
                            }, 1, 2, TimeUnit.SECONDS);

        执行策略：
            当一个任务被添加进线程池时，ThreadPoolExecutor的执行策略：
                1.线程数量未达到corePoolSize，则新建一个线程(核心线程)执行任务；
                2.线程数量达到了corePoolSize，则将任务移入队列等待；
                3.队列已满，总线程数 未达到 maximumPoolSize，则新建线程(非核心线程)执行任务；
                4.队列已满，总线程数 达到了 maximumPoolSize，则抛出RejectedExecutionHandler异常；

    自定义线程池：
        说明：
            Java为我们内置了五种常用的线程池，不过我们也可以根据需求来定义我们自己的线程池；
            由于线程池功能的不同归根到底还是内部的BlockingQueue实现不同，所以，想要实现自己的线程池，就必须从BlockingQueue的实现上做手脚；
            BlockingQueue的实现类有多个，我们就选用PriorityBlockingQueue来实现一个功能是按任务的优先级来处理的线程池；



























（https://blog.csdn.net/u010687392/article/details/49850803）