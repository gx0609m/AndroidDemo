Retrofit & RxJava

        使用步骤                    Retrofit                                       Retrofit & RxJava
           1                      添加网络权限；                                      添加网络权限

           2                      添加Retrofit依赖；                                  添加Retrofit、RxJava依赖

           3                      创建接收服务器返回数据的实体类 ——— MovieEntity；      创建接收服务器返回数据的实体类 ——— MovieEntity；

           4                      创建 用于描述网络请求 的接口 ——— MovieService；       创建 用于描述网络请求 的接口 ——— RxMovieService；

           5                      创建 Retrofit 实例                                  创建 Retrofit 实例

           6                      创建网络请求接口 movieService 实例                   创建网络请求接口 rxMovieService 实例

           7                      创建 call 实例 （对网络请求 movieService 的封装）     创建 observable 实例（对网络请求 rxMovieService 的封装）

           8                      发送网络请求 ——— 异步、同步                          通过 observable 进行网络请求的同时，还可 线程切换、数据处理 等，
                                                                                     RxJava中的操作符能让这一切都变得简单、条理


    从使用步骤看来：
            单独使用Retrofit与结合RxJava看起来并没有多大的差别，
        但是，
            RxJava牛叉的地方就在于它逻辑上的简洁，以及线程切换上的优势和强大的操作符；

        试想，
            如果我们现在需要对网络请求得到的结果MovieEntity中的某一个属性进行条件筛选（如按首字母顺序排列等），
            或者是增加多个线程切换的需求，如果仅使用Retrofit，那么就需要在onResponse()方法中修改代码逻辑，
            而且还可能产生很多的迷之嵌套；

        而结合了RxJava之后，
            我们就能在几乎毫不改变原有代码的情况下，通过增加操作符等来实现，
            从逻辑上来说，也仅仅只是增加了链式操作而已，更利于理解，也更利于编写和阅读；