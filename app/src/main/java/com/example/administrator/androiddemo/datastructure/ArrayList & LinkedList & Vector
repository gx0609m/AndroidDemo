ArrayList
    背景
        Java中的 数组 存在一些不足的地方，例如 声明（初始化）数组时 必须指定其长度，这样就会造成：
            ——— 声明过长，造成资源浪费；
            ——— 声明过短，资源不够，扩容又进一步造成了资源浪费；
        因此，ArrayList就出现了，它可以 动态改变 自己的大小，同时又具有数组的属性；


LinkedList
    背景
        在 数组 & ArrayList 中，增删数据都会付出很大的代价，数组后面的元素都要全部前移，造成资源浪费；
        因此，LinkedList出现了，它是基于 链表 的原理，当前元素会存储相邻元素的地址指针，因此增删数据会很方便；


比较
    ArrayList & LinkedList
        ArrayList
            ——— 基于 数组 的数据结构；
            ——— 查找快，增删慢；
            ——— 可以随机访问其中的元素，根据index；

        LinkedList
            ——— 基于 链表 的数据结构；
            ——— 查找慢，增删快；
            ——— 不能随机访问其中的元素，因为其内部结构是链表，没有index；

    ArrayList & Vector
        ArrayList
            ——— 内部方法是 非线程安全 的；
            ——— 大小可以 动态改变，当内部 元素数量 超过它的 初始大小 时，ArrayList 会将它的 容量增加50%；
            ——— 可以随机访问其中的元素，根据index；

        Vector
            ——— 内部方法是 线程安全 的；
            ——— 大小可以 动态改变，当内部 元素数量 超过它的 初始大小 时，Vector 会将它的 容量翻倍；
            ——— 可以随机访问其中的元素，根据index；


