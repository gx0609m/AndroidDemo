开发中关于图片的一整套处理方案
        主要特点：
            1.webp：文件最小，有透明通道；
            2.jpg：文件较小，无透明通道；
            3.png：文件较大，有透明通道；

        小图标：
            1.小图标大多是不规则形状，显示时多会要求能看到后方背景，所以需要有透明通道，一般使用png，
              尺寸小，没必要转webp，如果图标后方背景为纯色且确定，那么直接用jpg就可以了；
            2.UI给的png图应当再通过tinypng或者“智图”将图标文件大小缩小一些再放入drawable文件夹中；

        大图，背景图，默认图：
            上传到“智图”，转成webp；

        ui设计图尺寸和切图，如何只切一套图就够用：
            1.查友盟统计数据知道，市场主流屏幕为720p和1080p；
            2.ui按1080p的尺寸来做设计图，在此基础上切一套图，放于xxhdpi下即可适配大多数屏幕了；

        对于一些规则的图案：
            能用shape画就没必要切图处理了；

        图片选择：
            系统内置的图片选择只支持选单图，于是很多人做出了多图选择的框架，但很多做得不纯粹，又有图片选择又有裁剪的，这个只做图片选择，
            基于photoPicker修改了一下ui，做得类似微信，非常流畅：
                            https://github.com/glassLake/PhotoPicker

        图片裁剪：
            系统的图片裁剪被被各家厂商改得面目全非，试用了github的几家，发现ucrop是比较好的，基于此封装了一下，CropUtils：
                            https://github.com/glassLake/CropUtils

        图片上传（上传前压缩）：
            1.上传前根据期望的最终的显示大小进行压缩,压缩算法可参考:luban ——— https://github.com/Curzibn/Luban；
            2.为了便于拉取图片前就知道图片尺寸,上传所指定的图片路径中需带图片尺寸信息，比如 www.xxyy.com\landscape\jsjidsj-w-h-1080-1920.jpg；

        服务器端的图片处理api ——— 七牛：
            服务器端要能够根据图片路径后方拼接的参数对图片进行处理后返回，最常用的处理方式是:对原图缩小和裁剪、以及图片格式转换：
                缩小和裁剪：
                    比如,请求上面那张图片作为头像,头像组件的大小是80x80像素,那么可以；
                        www.xxyy.com\landscape\jsjidsj-w-h-1080-1920.jpg?imageMogr2/thumbnail/!80x80r/crop/80x80/
                        操作的意义是:限定短边,生成不小于80x80的缩略图:这时,会生成短边为80,长边为80*1920/1080，然后,裁剪成80*80的图(默认居中裁剪)；

                格式转换:
                    如果是用于动态更换的图标,那么保持原来的png格式；
                    如果图片只用于展示,无需透明度,那么转换成jpg；

                gif图片:
                    七牛能够对gif图片进行缩略和剪切，也能转成jpg格式；

            通过这两步步操作,能够将网络传输的流量最小化，省七牛的流量费,省用户的流量和加载时间；

        客户端的图片处理:
            1.fresco；
            2.Glide;
            3.Picasso;
            4.UIL;











（http://blog.csdn.net/hss01248/article/details/52163969）