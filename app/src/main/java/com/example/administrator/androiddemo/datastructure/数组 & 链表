数组 & 链表 ——— Java中 数据存储方式 最底层的两种 数据结构
    说明
        数组：
            ——— 将元素在 物理内存中连续存放，可通过下标迅速访问数组中的任何元素；
            ——— 如果在数组中增加一个元素，须移动大量元素，在连续的物理内存中空出一个元素的空间，然后将要增加的元素放在其中；
            ——— 同理，如果在数组中删除一个元素，须移动大量的元素去填充被移动的元素；

            由上，可以看到 数组的特点：
                ——— 连续空间（物理内存）；
                ——— 寻址迅速；
                ——— 在删除或者添加元素的时候需要有较大幅度的移动，所以查询速度快，增删较慢；

            因此，如果需要 快速访问数据，很少 插入/删除 元素，可以使用数组；

        链表：
            ——— 链表中的元素在 物理内存中不是连续存储的，而是通过元素中的指针联系在一起的；
            ——— 链表的 数据单元（元素）= 数据 + 下一个链表单元数据的地址（指针）；
            ——— 链表中，上一个元素中有指针指到下一个元素，以此类推，直到指向最后一个元素，从而形成一个链表；
            ——— 在链表中 查找 元素时，需要从第一个元素开始，一直找到需要的元素位置；
            ——— 在链表中 插入/删除 元素时就很简单了，只需要修改 被插入位置前一个元素 的指针值 以及 要插入元素的 指针值 就可以了（这里是仅针对单链表的说明，双链表中的元素 则会存储 前/后 两个元素的地址）；

            由上，可以看到 数组的特点：
                ——— 空间不连续（逻辑上是连续的）；
                ——— 寻址困难；
                ——— 增删元素只需修改指针，所以查询慢、增删快；

            因此，如果需要 经常性的 插入/删除 元素，并且很少查找数据，就可以使用链表了；


    区别
                            内存分配                        连续性                             时间复杂度
        —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— ——
        数组            静态内存分配（栈中）        物理内存上连续，逻辑上可以不连续    定位时间复杂度O(1)，插入/删除时间复杂度O(n)
                  （无需初始化，系统自动申请空间）                                             （数组下标定位）

        链表            动态内存分配（堆中）        物理内存上可以不连续，逻辑上连续    定位时间复杂度O(n)，插入/删除时间复杂度O(1)
                    （每个元素须手动申请空间）                                            （前一个元素中的指针值定位）


    相同点
        都是线性结构 ——— 数组物理内存上线性，链表逻辑上线性；




Tips
    在Java集合框架中的大部分类的大小是可以随着元素个数的增加而相应的增加的，我们似乎不用关心它的初始大小；
    但如果我们考虑类的性能问题时，就一定要考虑尽可能地设置好集合对象的初始大小，这将大大提高代码的性能；
    比如，HashTable缺省的初始大小为101，载入因子为0.75，即如果其中的元素个数超过75个，它就必须增加大小并重新组织元素；
    所以，如果你知道在创建一个新的HashTable对象时就知道元素的确切数目如为110；
    那么，就应将其初始大小设为110/0.75=148；
    这样，就可以避免重新组织内存并增加大小；


    扩容、是否允许插入不同的数据类型、ArrayList中的装箱拆箱等
